# Newtons Law of Cooling change

import numpy as np
from scipy.optimize import fsolve
from typing import Callable

def Newton_cool(T: float, K: float, M: float) -> float:
    """
    Newton Cooling ODE function that returns the derivative of temperature with respect to time.

    Parameters:
    T (float): Temperature of the object.
    M (float): Temperature of the surrounding area.
    K (float): Proportionality constant.

    Returns:
    float: Derivative of temperature with respect to time.
    """
    return K * (M - T)

def true_sol(T0: float, M: float, K: float, t: float) -> float:
    """
    Exact solution of the Newton's Law of Cooling.

    Parameters:
    T0 (float): Initial temperature of the object.
    M (float): Temperature of the surrounding area.
    K (float): Proportionality constant.
    t (float): Time.

    Returns:
    float: Temperature at time t.
    """
    return M + (T0 - M) * np.exp(-K * t)

def euler_method(func: Callable, method: str, T0: float, M: float, K: float, TT: float, h: float) -> np.ndarray:
    """
    Generalized Euler method function to approximate the solution of the ODE using either forward or backward Euler method.

    Parameters:
    func (Callable): Function representing the ODE.
    method (str): Euler method type ('forward' or 'backward').
    T0 (float): Initial temperature.
    M (float): Temperature of the surrounding area.
    K (float): Proportionality constant.
    TT (float): Final time for simulation.
    h (float): Time step.

    Returns:
    np.ndarray: Array of approximated temperatures over time.
    """
    if h <= 0:
        raise ValueError("Time step h must be positive")
    
    num_steps = int(TT / h)
    temperatures = np.zeros(num_steps)
    temperatures[0] = T0

    for i in range(1, num_steps):
        if method == 'forward':
            temperatures[i] = temperatures[i - 1] + h * func(temperatures[i - 1], K, M)
        elif method == 'backward':
            f = lambda y: y - temperatures[i - 1] - h * func(y, K, M)
            temperatures[i] = fsolve(f, temperatures[i - 1])  # Using previous temperature as initial guess
        else:
            raise ValueError("Method must be 'forward' or 'backward'")
    
    return temperatures

# Example usage
T0 = 40  # Initial temperature
M = 25   # Surrounding temperature
K = 2    # Proportionality constant
TT = 10  # Final time
h = 0.01 # Time step

# Approximating using both methods
approx_temps_backward = euler_method(Newton_cool, 'backward', T0, M, K, TT, h)
approx_temps_forward = euler_method(Newton_cool, 'forward', T0, M, K, TT, h)

approx_temps_backward, approx_temps_forward




# Adams-Bashforth and Adams-Moulton change

def RK4_step(func, y0, K, M, h):
    """
    Perform a single step of the Runge-Kutta 4th order method.

    Parameters:
    y0 (float): Initial value.
    K, M (float): Parameters of the function.
    h (float): Step size.

    Returns:
    float: Next value after a single RK4 step.
    """
    k1 = h * func(y0, K, M)
    k2 = h * func(y0 + 0.5 * k1, K, M)
    k3 = h * func(y0 + 0.5 * k2, K, M)
    k4 = h * func(y0 + k3, K, M)
    return y0 + (k1 + 2*k2 + 2*k3 + k4) / 6

def AB3(func, T0, M, K, TT, h):
    """
    Adams-Bashforth of order 3 method.

    Parameters:
    func (callable): Function representing the differential equation (dy/dt = func(y, K, M)).
    T0 (float): Initial value.
    M, K (float): Parameters of the function.
    TT (float): End time.
    h (float): Step size.

    Returns:
    np.ndarray: Array of values approximating the solution at each step.
    """
    if h <= 0 or TT <= 0:
        raise ValueError("Time step h and final time TT must be positive")

    num_steps = int(TT / h)
    if num_steps < 3:
        raise ValueError("Number of steps must be at least 3 for AB3 method")

    x = np.zeros(num_steps)
    x[0] = T0

    # Initial steps using RK4
    for i in range(2):
        x[i + 1] = RK4_step(func, x[i], K, M, h)

    # Adams-Bashforth steps
    for i in range(2, num_steps - 1):
        f1 = func(x[i], K, M)
        f2 = func(x[i - 1], K, M)
        f3 = func(x[i - 2], K, M)
        x[i + 1] = x[i] + h / 12 * (23 * f1 - 16 * f2 + 5 * f3)

    return x

def AM4(func, T0, M, K, TT, h):
    """
    Adams-Moulton of order 4 solver.

    Parameters:
    func (callable): Function representing the differential equation (dy/dt = func(y, K, M)).
    T0 (float): Initial value.
    M, K (float): Parameters of the function.
    TT (float): End time.
    h (float): Step size.

    Returns:
    np.ndarray: Array of values approximating the solution at each step.
    """
    if h <= 0 or TT <= 0:
        raise ValueError("Time step h and final time TT must be positive")

    num_steps = int(TT / h)
    if num_steps < 3:
        raise ValueError("Number of steps must be at least 3 for AM4 method")

    x = np.zeros(num_steps)
    x[0] = T0

    # Initial steps using RK4
    for i in range(2):
        x[i + 1] = RK4_step(func, x[i], K, M, h)

    # Adams-Moulton steps
    for i in range(2, num_steps - 1):
        f = lambda y: y - x[i] - h / 24 * (9 * func(y, K, M) + 19 * func(x[i], K, M) - 5 * func(x[i-1], K, M) + func(x[i-2], K, M))
        x[i + 1] = fsolve(f, x[i])

    return x

# Example usage with improved code
T0 = 40  # Initial temperature
M = 25   # Surrounding temperature
K = 2    # Proportionality constant
TT = 10  # Final time
h = 0.01 # Time step

approx_temps_ab = AB3(Newton_cool, T0, M, K, TT, h)
approx_temps_am = AM4(Newton_cool, T0, M, K, TT, h)

approx_temps_ab, approx_temps_am




